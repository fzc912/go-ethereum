// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package pair

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PairABI is the input ABI used to generate the binding from.
const PairABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stockAndMoneyAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"DealWithPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stockAndMoneyAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"NewLimitOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"NewMarketOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"OrderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"RemoveOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveStockAndMoney\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"price32\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"prevKey\",\"type\":\"uint72\"}],\"name\":\"addLimitOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"inAmount\",\"type\":\"uint112\"}],\"name\":\"addMarketOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moneyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"price32\",\"type\":\"uint32\"}],\"name\":\"calcStockAndMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moneyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBooked\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"bookedStock\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"bookedMoney\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"firstBuyID\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxCount\",\"type\":\"uint32\"}],\"name\":\"getOrderList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstSellPriceNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstSellPriceDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstBuyPriceNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstBuyPriceDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolPriceNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolPriceDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserveStock\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserveMoney\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"firstSellID\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalStatus\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"res\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"money\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"prevKey\",\"type\":\"uint72\"}],\"name\":\"removeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rmList\",\"type\":\"uint256[]\"}],\"name\":\"removeOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// PairBin is the compiled bytecode used for deploying new contracts.
var PairBin = "0x60806040526001600a5534801561001557600080fd5b50614570806100256000396000f3fe6080604052600436106101665760003560e01c80638670b2a4116100d1578063bd9a548b1161008a578063c2dab57b11610064578063c2dab57b146106ed578063dd62ed3e1461072c578063e6ba413614610767578063fff6cae9146107b457610166565b8063bd9a548b1461062b578063bdf3c4ae14610673578063c018f4131461068857610166565b80638670b2a41461048e57806389afcb441461051e57806395d89b411461056a578063a6e815331461057f578063a9059cbb146105bf578063bc25cf77146105f857610166565b80632a63986b116101235780632a63986b14610306578063313ce567146103835780634ddd108a146103ae5780636a627842146103df57806370a08231146104125780637850378e1461044557610166565b806306fdde031461016b5780630902f1ac146101f5578063095ea7b31461023a57806318160ddd146102875780631b857340146102ae57806323b872dd146102c3575b600080fd5b34801561017757600080fd5b506101806107c9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ba5781810151838201526020016101a2565b50505050905090810190601f1680156101e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020157600080fd5b5061020a610800565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b34801561024657600080fd5b506102736004803603604081101561025d57600080fd5b506001600160a01b038135169060200135610812565b604080519115158252519081900360200190f35b34801561029357600080fd5b5061029c610829565b60408051918252519081900360200190f35b3480156102ba57600080fd5b5061020a61082f565b3480156102cf57600080fd5b50610273600480360360608110156102e657600080fd5b506001600160a01b03813581169160208101359091169060400135610841565b34801561031257600080fd5b506103816004803603602081101561032957600080fd5b810190602081018135600160201b81111561034357600080fd5b82018360208201111561035557600080fd5b803590602001918460208302840111600160201b8311171561037657600080fd5b5090925090506108d6565b005b34801561038f57600080fd5b5061039861099c565b6040805160ff9092168252519081900360200190f35b3480156103ba57600080fd5b506103c36109a1565b604080516001600160a01b039092168252519081900360200190f35b3480156103eb57600080fd5b5061029c6004803603602081101561040257600080fd5b50356001600160a01b03166109c5565b34801561041e57600080fd5b5061029c6004803603602081101561043557600080fd5b50356001600160a01b0316610c87565b34801561045157600080fd5b506103816004803603606081101561046857600080fd5b508035151590602081013563ffffffff16906040013568ffffffffffffffffff16610c99565b34801561049a57600080fd5b506104ce600480360360608110156104b157600080fd5b50803515159063ffffffff60208201358116916040013516610d12565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561050a5781810151838201526020016104f2565b505050509050019250505060405180910390f35b34801561052a57600080fd5b506105516004803603602081101561054157600080fd5b50356001600160a01b0316610e1c565b6040805192835260208301919091528051918290030190f35b34801561057657600080fd5b5061018061110f565b61029c6004803603606081101561059557600080fd5b5080356001600160a01b0390811691602081013590911690604001356001600160701b031661145f565b3480156105cb57600080fd5b50610273600480360360408110156105e257600080fd5b506001600160a01b0381351690602001356116f0565b34801561060457600080fd5b506103816004803603602081101561061b57600080fd5b50356001600160a01b03166116fd565b34801561063757600080fd5b50610640611887565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b34801561067f57600080fd5b506103c3611989565b610381600480360360c081101561069e57600080fd5b50803515159060208101356001600160a01b03169060408101356001600160401b031690606081013563ffffffff9081169160808101359091169060a0013568ffffffffffffffffff166119a7565b3480156106f957600080fd5b506105516004803603604081101561071057600080fd5b5080356001600160401b0316906020013563ffffffff16611de2565b34801561073857600080fd5b5061029c6004803603604081101561074f57600080fd5b506001600160a01b0381358116916020013516611e10565b34801561077357600080fd5b5061077c611e2d565b6040518082606080838360005b838110156107a1578181015183820152602001610789565b5050505090500191505060405180910390f35b3480156107c057600080fd5b50610381611e4d565b60408051808201909152601781527f4f6e65537761702d4c69717569646974792d5368617265000000000000000000602082015290565b600e5490607082901c9060e083901c90565b600061081f338484611f69565b5060015b92915050565b600b5481565b600f5490607082901c9060e083901c90565b6001600160a01b0383166000908152600d60209081526040808320338452909152812054600019146108c0576001600160a01b0384166000908152600d6020908152604080832033845290915290205461089b9083611fcb565b6001600160a01b0385166000908152600d602090815260408083203384529091529020555b6108cb84848461200d565b5060015b9392505050565b600a5460011461091f576040805162461bcd60e51b815260206004820152600f60248201526e13db9954ddd85c0e881313d0d2d151608a1b604482015290519081900360640190fd5b6000600a5561092c6143a8565b6004602060078401020161094082826120bb565b60005b8381101561099057600085858381811061095957fe5b602002919091013591505060ff81161515600882901c602883901c6109808383838a612116565b5050600190920191506109439050565b50506001600a55505050565b601290565b60006109ab6143a8565b6109b68160a46120bb565b6109bf816122c2565b91505090565b6000600a54600114610a10576040805162461bcd60e51b815260206004820152600f60248201526e13db9954ddd85c0e881313d0d2d151608a1b604482015290519081900360640190fd5b6000600a55610a1d6143a8565b610a288160c46120bb565b6000806000610a35610800565b925092509250600080610a4661082f565b50915091506000610a5e610a59886122d5565b6122df565b90506000610a6e610a59896122c2565b9050866001600160701b0316846001600160701b0316018210158015610aa85750856001600160701b0316836001600160701b0316018110155b610af4576040805162461bcd60e51b81526020600482015260186024820152774f6e65537761703a20494e56414c49445f42414c414e434560401b604482015290519081900360640190fd5b6001600160701b038085169092039183811690910390878116830390871682036000610b218a8a8d61236f565b600b5490915080610b5e57610b4a6103e8610b44610b3f87876124b8565b612511565b90611fcb565b9c50610b5960006103e8612562565b610ba1565b610b9e6001600160701b038c16610b7586846124b8565b81610b7c57fe5b046001600160701b038c16610b9186856124b8565b81610b9857fe5b046125ed565b9c505b60008d11610bf6576040805162461bcd60e51b815260206004820152601c60248201527f4f6e65537761703a20494e53554646494349454e545f4d494e54454400000000604482015290519081900360640190fd5b610c008e8e612562565b610c0b86868b612603565b8115610c1f57610c1b86866124b8565b6010555b8d6001600160a01b0316336001600160a01b03167fbcad3d7d3dfccb90d49c6063bf70f828901fefc88937d90af74e58e6e55bc39d86607087901b176040518082815260200191505060405180910390a350506001600a5550989a9950505050505050505050565b600c6020526000908152604090205481565b600a54600114610ce2576040805162461bcd60e51b815260206004820152600f60248201526e13db9954ddd85c0e881313d0d2d151608a1b604482015290519081900360640190fd5b6000600a55610cef6143a8565b610cfb816101046120bb565b610d0784848484612116565b50506001600a555050565b606063ffffffff8316610d3b578315610d3257600f5460e01c9250610d3b565b600e5460e01c92505b60008415610d4d575062400011610d51565b5060115b6040805160208082524360181b63ffffffff881617929082019082018060005b8863ffffffff16811015610e125785825260209091019060010163ffffffff8a16610d9b57610e12565b868a63ffffffff16624000008110610daf57fe5b0154955085610e05576040805162461bcd60e51b815260206004820152601a60248201527f4f6e65537761703a20494e434f4e53495354454e545f424f4f4b000000000000604482015290519081900360640190fd5b623fffff86169950610d71565b8084528482038086f35b600080600a54600114610e68576040805162461bcd60e51b815260206004820152600f60248201526e13db9954ddd85c0e881313d0d2d151608a1b604482015290519081900360640190fd5b6000600a55610e756143a8565b610e808160c46120bb565b6000806000610e8d610800565b925092509250600080610e9e61082f565b506001600160701b031691506001600160701b031691506000610ec783610b44610a598a6122d5565b90506000610edb83610b44610a598b6122c2565b9050866001600160701b03168210158015610eff5750856001600160701b03168110155b610f4b576040805162461bcd60e51b81526020600482015260186024820152774f6e65537761703a20494e56414c49445f42414c414e434560401b604482015290519081900360640190fd5b6000610f5888888b61236f565b600b54306000908152600c60205260409020549192509081610f7a82876124b8565b81610f8157fe5b049c5081610f8f82866124b8565b81610f9657fe5b049b5060008d118015610fa9575060008c115b610ffa576040805162461bcd60e51b815260206004820152601c60248201527f4f6e65537761703a20494e53554646494349454e545f4255524e454400000000604482015290519081900360640190fd5b306000908152600c6020526040812055600b546110179082611fcb565b600b5560408051828152905160009130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050600061105f8a6126b0565b905061107561106d8b6122d5565b8e8e846126ba565b6110896110818b6122c2565b8e8d846126ba565b8b840393508a8303925061109e848489612603565b81156110b2576110ae84846124b8565b6010555b6040805160708d901b8e17815290516001600160a01b038f169133917fdbdf9b8e4b75e75b162d151ec8fc7f0561cabab5fcccfa2600be62223e4300c49181900360200190a3505050505050505050506001600a81905550915091565b60606111196143a8565b6111248160a46120bb565b606061112f826122d5565b6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561116757600080fd5b505afa15801561117b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156111a457600080fd5b8101908080516040519392919084600160201b8211156111c357600080fd5b9083019060208201858111156111d857600080fd5b8251600160201b8111828201881017156111f157600080fd5b82525081516020918201929091019080838360005b8381101561121e578181015183820152602001611206565b50505050905090810190601f16801561124b5780820380516001836020036101000a031916815260200191505b506040525050509050606061125f836122c2565b6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561129757600080fd5b505afa1580156112ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156112d457600080fd5b8101908080516040519392919084600160201b8211156112f357600080fd5b90830190602082018581111561130857600080fd5b8251600160201b81118282018810171561132157600080fd5b82525081516020918201929091019080838360005b8381101561134e578181015183820152602001611336565b50505050905090810190601f16801561137b5780820380516001836020036101000a031916815260200191505b50604052505050905081816040516020018083805190602001908083835b602083106113b85780518252601f199092019160209182019101611399565b6001836020036101000a03801982511681845116808217855250505050505090500180602f60f81b81525060010182805190602001908083835b602083106114115780518252601f1990920191602091820191016113f2565b6001836020036101000a03801982511681845116808217855250505050505090500180652d536861726560d01b81525060060192505050604051602081830303815290604052935050505090565b6000600a546001146114aa576040805162461bcd60e51b815260206004820152600f60248201526e13db9954ddd85c0e881313d0d2d151608a1b604482015290519081900360640190fd5b6000600a556114b76143a8565b6114c3816101046120bb565b6114cb6143c6565b6114d4826122c2565b6001600160a01b03166102808201526114ec826122d5565b6001600160a01b039081166102608301526102808201518782169116148061152a57508061026001516001600160a01b0316866001600160a01b0316145b611574576040805162461bcd60e51b815260206004820152601660248201527527b732a9bbb0b81d1024a72b20a624a22faa27a5a2a760511b604482015290519081900360640190fd5b6102808101516001600160a01b0387811691161461159183612ac9565b6001600160401b03166102008301526115a983612ade565b6001600160401b03166102208301526115c183612aea565b6001600160401b03166102408301526115d9836126b0565b6001600160a01b03166102a08301526115f183612af5565b6001600160a01b03166102c083015260006101c0830181905282526001600160701b0385166040830152611623610800565b63ffffffff1660a08501526001600160701b039081166101208501521661014083015261164e61082f565b63ffffffff1660808501526001600160701b039081166101608501521661018083015261167b8282612afe565b6101e08201516001600160a01b038716905280156116a9576101e082015163fdf5e0ff6020909101526116ba565b6101e0820151629896806020909101525b6116c2614498565b6101e0830151516116d4908784612cce565b6116df838383612d3a565b6001600a5598975050505050505050565b600061081f33848461200d565b600a54600114611746576040805162461bcd60e51b815260206004820152600f60248201526e13db9954ddd85c0e881313d0d2d151608a1b604482015290519081900360640190fd5b6000600a556117536143a8565b61175e8160c46120bb565b6000611769826122d5565b90506000611776836122c2565b9050600080611783610800565b509150915060008061179361082f565b506001600160701b031691506001600160701b0316915060006117b5876122df565b905060006117c2876122df565b9050856001600160701b0316840182101580156117ea5750846001600160701b031683018110155b611836576040805162461bcd60e51b81526020600482015260186024820152774f6e65537761703a20494e56414c49445f42414c414e434560401b604482015290519081900360640190fd5b60006118418a6126b0565b905061185c898c878a6001600160701b0316870303846126ba565b611875888c86896001600160701b0316860303846126ba565b50506001600a55505050505050505050565b6000806000806000806118986143a8565b6118a38160a46120bb565b60008060006118b0610800565b925092509250816001600160701b03169550826001600160701b03169450600099506000985060009750600096508063ffffffff1660001461192d57600060118263ffffffff1662400000811061190357fe5b0154905061190f614498565b61191d604083901c87612f4a565b8051602090910151909c509a5050505b600f5460e01c801561197c576000624000118263ffffffff1662400000811061195257fe5b0154905061195e614498565b61196c604083901c88612f4a565b8051602090910151909b50995050505b5050505050909192939495565b60006119936143a8565b61199e8160a46120bb565b6109bf816122d5565b600a546001146119f0576040805162461bcd60e51b815260206004820152600f60248201526e13db9954ddd85c0e881313d0d2d151608a1b604482015290519081900360640190fd5b6000600a556119fd6143a8565b611a09816101646120bb565b611a1281612f9e565b15611a4e5760405162461bcd60e51b81526004018080602001828103825260228152602001806144f86022913960400191505060405180910390fd5b611a566143c6565b611a5f82612ac9565b6001600160401b0316610200820152611a77826126b0565b6001600160a01b03166102a0820152611a8f82612af5565b6001600160a01b03166102c0820152611aa7826122d5565b6001600160a01b0316610260820152611abf826122c2565b6001600160a01b0316610280820152611ad782612ade565b6001600160401b0316610220820152611aef82612aea565b6001600160401b0390811661024083015260006101c0830152600182526101e0820180516001600160a01b038a16905280519188166040909201919091525163ffffffff8616602090910152611b458885612fad565b63ffffffff166020820152611b58614498565b623fffff602a88901c1615611bb4576040805162461bcd60e51b815260206004820152601760248201527f4f6e65537761703a20494e56414c49445f414d4f554e54000000000000000000604482015290519081900360640190fd5b6307ffffff8616629896808110801590611bd857506305f5e0ff63ffffffff821611155b611c22576040805162461bcd60e51b81526020600482015260166024820152754f6e65537761703a20494e56414c49445f505249434560501b604482015290519081900360640190fd5b600080611c308a8a88613062565b955090925090508b15611c495760408501819052611c51565b604085018290525b505050600160701b826040015110611ca4576040805162461bcd60e51b81526020600482015260116024820152704f6e65537761703a204f564552464c4f5760781b604482015290519081900360640190fd5b611cac610800565b63ffffffff1660a08501526001600160701b0390811661012085015216610140830152611cd761082f565b63ffffffff1660808501526001600160701b0390811661016085015216610180830152611d04828a612afe565b68ffffffffffffffffff841615611dc5576000611d2c8a846101e001518560200151886130bd565b90508015611dc357611d4f836101e0015160000151898a8a87602001518f613106565b8915611d6b576040830151610160840180519091019052611d7d565b60408301516101808401805190910190525b611d968361018001518461016001518560800151613191565b826101a0015115611dba57611dba8361014001518461012001518560a00151612603565b50505050611dd5565b505b611dd0828a83612d3a565b505050505b50506001600a5550505050565b600080611ded6143a8565b611df88160e46120bb565b611e03858583613062565b5090969095509350505050565b600d60209081526000928352604080842090915290825290205481565b611e356144b2565b600e548152600f546020820152601054604082015290565b600a54600114611e96576040805162461bcd60e51b815260206004820152600f60248201526e13db9954ddd85c0e881313d0d2d151608a1b604482015290519081900360640190fd5b6000600a55611ea36143a8565b611eae8160a46120bb565b6000611eb8610800565b92505050600080611ec761082f565b506001600160701b031691506001600160701b031691506000611eec610a59866122d5565b90506000611efc610a59876122c2565b9050838210158015611f0e5750828110155b611f5a576040805162461bcd60e51b81526020600482015260186024820152774f6e65537761703a20494e56414c49445f42414c414e434560401b604482015290519081900360640190fd5b611dd584830384830387612603565b6001600160a01b038084166000818152600d6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60006108cf83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613209565b6001600160a01b0383166000908152600c60205260409020546120309082611fcb565b6001600160a01b038085166000908152600c6020526040808220939093559084168152205461205f90826132a0565b6001600160a01b038084166000818152600c602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b36818114612107576040805162461bcd60e51b8152602060048201526014602482015273494e56414c49445f43414c4c4441544153495a4560601b604482015290519081900360640190fd5b60a0810360a081853750505050565b61211e6143c6565b61212661082f565b63ffffffff1660808401526001600160701b03908116610160840152166101808201528461217a57612156610800565b63ffffffff1660a08401526001600160701b03908116610120840152166101408201525b6121826144d0565b61218e828787876132fa565b80519091506001600160a01b031633146121e4576040805162461bcd60e51b815260206004820152601260248201527127b732a9bbb0b81d102727aa2fa7aba722a960711b604482015290519081900360640190fd5b60006121ef84612ac9565b90506000816001600160401b031683604001516001600160401b03160290506000612219866126b0565b9050881561227d57612229614498565b612237856020015188612f4a565b905060008160200151826000015185028161224e57fe5b6101608901805192909104918290039052905061227661226d896122c2565b875183866126ba565b505061229e565b61018085018051839003905261229e612295876122d5565b855184846126ba565b6122b78561018001518661016001518760800151613191565b505050505050505050565b60008160015b602002015190505b919050565b60008160026122c8565b60006001600160a01b0382166122f65750476122d0565b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561233c57600080fd5b505afa158015612350573d6000803e3d6000fd5b505050506040513d602081101561236657600080fd5b505190506122d0565b60008061237b83612af5565b6001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156123b357600080fd5b505afa1580156123c7573d6000803e3d6000fd5b505050506040513d60208110156123dd57600080fd5b50516010546001600160a01b0382161580159450919250906124a357801561249e57600061241a610b3f6001600160701b038981169089166124b8565b9050600061242783612511565b90508082111561249b576000612454600261244e6124458686611fcb565b600b54906124b8565b906124b8565b905060006124776124668460026124b8565b6124718660036124b8565b906132a0565b9050600081838161248457fe5b0490508015612497576124978782612562565b5050505b50505b6124af565b80156124af5760006010555b50509392505050565b6000826124c757506000610823565b828202828482816124d457fe5b04146108cf5760405162461bcd60e51b815260040180806020018281038252602181526020018061451a6021913960400191505060405180910390fd5b60006003821115612554575080600160028204015b8181101561254e5780915060028182858161253d57fe5b04018161254657fe5b049050612526565b506122d0565b81156122d057506001919050565b600b5461256f90826132a0565b600b556001600160a01b0382166000908152600c602052604090205461259590826132a0565b6001600160a01b0383166000818152600c602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106125fc57816108cf565b5090919050565b600160701b831080156126195750600160701b82105b61265e576040805162461bcd60e51b81526020600482015260116024820152704f6e65537761703a204f564552464c4f5760781b604482015290519081900360640190fd5b60408051607084901b851780825291517f8a0df8ef054fae2c3d2d19a7b322e864870cc9fd3cb07fb9526309c596244bf49181900360200190a160e09190911b6001600160e01b03191617600e555050565b60008160036122c8565b6001600160a01b038416612785576040805160008152602081019182905280516001600160a01b03861692612328928692909190819081908082805b602083106127155780518252601f1990920191602091820191016126f6565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381858888f193505050503d8060008114612778576040519150601f19603f3d011682016040523d82523d6000602084013e61277d565b606091505b505050612ac3565b60408051808201825260198152787472616e7366657228616464726573732c75696e743235362960381b60209182015281516001600160a01b0386811660248301526044808301879052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b178152925181516000946060948a169392918291908083835b6020831061282e5780518252601f19909201916020918201910161280f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612890576040519150601f19603f3d011682016040523d82523d6000602084013e612895565b606091505b50915091508180156128c35750805115806128c357508080602001905160208110156128c057600080fd5b50515b915081612ac0576000836001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561290557600080fd5b505afa158015612919573d6000803e3d6000fd5b505050506040513d602081101561292f57600080fd5b505160408051808201825260198152787472616e7366657228616464726573732c75696e743235362960381b60209182015281516001600160a01b03808516602483015260448083018b9052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17815292518151949550918b1693909282918083835b602083106129d75780518252601f1990920191602091820191016129b8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612a39576040519150601f19603f3d011682016040523d82523d6000602084013e612a3e565b606091505b509093509150828015612a6d575081511580612a6d5750818060200190516020811015612a6a57600080fd5b50515b612abe576040805162461bcd60e51b815260206004820152601860248201527f4f6e65537761703a205452414e534645525f4641494c45440000000000000000604482015290519081900360640190fd5b505b50505b50505050565b600060808260045b6020020151901c92915050565b60006040826004612ad1565b600080826004612ad1565b600081816122c8565b60006101a083018190528115612bc1576000612b1e8461028001516122df565b905083610120015184610160015101811015612b81576040805162461bcd60e51b815260206004820152601760248201527f4f6e65537761703a204d4f4e45595f4d49534d41544348000000000000000000604482015290519081900360640190fd5b83610120015184610160015182030391508184604001511015612bbb57604084015161012085018051918403909101905260016101a08501525b50612c70565b6000612bd18461026001516122df565b905083610140015184610180015101811015612c34576040805162461bcd60e51b815260206004820152601760248201527f4f6e65537761703a2053544f434b5f4d49534d41544348000000000000000000604482015290519081900360640190fd5b83610140015184610180015182030391508184604001511015612c6e57604084015161014085018051918403909101905260016101a08501525b505b8083604001511115612cc9576040805162461bcd60e51b815260206004820152601b60248201527f4f6e65537761703a204445504f5349545f4e4f545f454e4f5547480000000000604482015290519081900360640190fd5b505050565b70ffffffffffffffffffffffffffffffffff60701b607084901b166001600160701b0383161760081b8115612d01576001175b6040805182815290517f4a9ae315b457897254ce3dff6a6eee548e004eee8b6d468ae17d13132d40a2cb9181900360200190a150505050565b6000610100840181905260e08401819052612d56848415613538565b63ffffffff1660608501819052600060c08601525b63ffffffff811615612e7457612d7f6144d0565b612d8a851583613554565b5090506000858015612db55750866101e001516020015163ffffffff16826020015163ffffffff1611155b80612de2575085158015612de25750866101e001516020015163ffffffff16826020015163ffffffff1610155b905080612df0575050612e74565b612df8614498565b612e068884602001516135bb565b90506000612e158989846135fe565b90508015612e265750505050612e74565b612e3389898787866136f9565b60408401516001600160401b031615612e5b57612e52881586866138ac565b50505050612e74565b612e668815866138fe565b505050606001519050612d6b565b845115612e9757612e868585856135fe565b50612e92858585613944565b612ead565b60408501805160c0870180519091019052600090525b6000612eb98686613ab1565b90508415612ed95761010086015161018087018051919091039052612eec565b60e0860151610160870180519190910390525b8163ffffffff16866060015163ffffffff1614612f0f57612f0f86861584613c7d565b612f288661018001518761016001518860800151613191565b612f418661014001518761012001518860a00151612603565b95945050505050565b612f52614498565b612f5b83613ca5565b9050612f6682612ade565b81516001600160401b0391909116028152612f8082612aea565b6001600160401b031681602001818151029150818152505092915050565b6080015160c01c60ff16151590565b600063ffffffff8216612fca576000194301403218623fffff1691505b60005b60648163ffffffff16108015612fec5750623fffff63ffffffff841611155b1561301457612ffb8484613d45565b6130085782915050610823565b60019283019201612fcd565b506040805162461bcd60e51b815260206004820152601d60248201527f4f6e65537761703a2043414e4e4f545f46494e445f56414c49445f4944000000604482015290519081900360640190fd5b60008061306d614498565b6130778585612f4a565b9050600061308485612ac9565b9050806001600160401b0316876001600160401b0316029350816020015182600001518502816130b057fe5b0492505093509350939050565b6000806130c86144d0565b60006130d48886613d84565b925092509250806130eb57600093505050506130fe565b6130f88888848987613def565b93505050505b949350505050565b600882901b63ffffff001663ffffffff84166001600160401b0386811690881660408a811b67ffffffffffffffff60401b1691909117901b17602090811b91909117901b178115613155576001175b6040805182815290517ffec76bfb0f1949c9e27b78f575fce4513238705f161f7e90231d07ebde929a139181900360200190a150505050505050565b600160701b831080156131a75750600160701b82105b6131ec576040805162461bcd60e51b81526020600482015260116024820152704f6e65537761703a204f564552464c4f5760781b604482015290519081900360640190fd5b6001600160e01b031960e09190911b1660709190911b1717600f55565b600081848411156132985760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561325d578181015183820152602001613245565b50505050905090810190601f16801561328a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156108cf576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6133026144d0565b61330a6144d0565b60006133168686613554565b9150915080613365576040805162461bcd60e51b815260206004820152601660248201527527b732a9bbb0b81d102727afa9aaa1a42fa7a92222a960511b604482015290519081900360640190fd5b68ffffffffffffffffff841661340b5760006133818888613538565b90508063ffffffff168663ffffffff16146133d8576040805162461bcd60e51b815260206004820152601260248201527113db9954ddd85c0e881393d517d1925494d560721b604482015290519081900360640190fd5b6133e788888560600151613c7d565b86613405576134058861014001518961012001518a60a00151612603565b50613515565b60006134156144d0565b60006134218988613d84565b92509250925080613479576040805162461bcd60e51b815260206004820152601960248201527f4f6e65537761703a20494e56414c49445f504f534954494f4e00000000000000604482015290519081900360640190fd5b8763ffffffff16826060015163ffffffff16146134f6576060820151925063ffffffff83166134e4576040805162461bcd60e51b815260206004820152601260248201527113db9954ddd85c0e8814915050d217d1539160721b604482015290519081900360640190fd5b6134ee8984613554565b509150613479565b60608086015163ffffffff16908301526135118984846138ac565b5050505b61352482604001518688613f36565b61352e86866138fe565b5095945050505050565b6000811561354b57506080820151610823565b505060a0015190565b61355c6144d0565b6000831561359c57613585624000118463ffffffff1662400000811061357e57fe5b0154613f98565b602081015190925063ffffffff16151590506135b4565b61358560118463ffffffff1662400000811061357e57fe5b9250929050565b6135c3614498565b6135cc82613ca5565b61022084015181516001600160401b039182160282526102409094015160208201805191909516029093525090919050565b6000806136178486610120015187610140015186613fe5565b9050600160701b8110613671576040805162461bcd60e51b815260206004820152601d60248201527f4f6e65537761703a20435552525f544f4b454e5f544f4f5f4c41524745000000604482015290519081900360640190fd5b836136a3578461020001516001600160401b0316818161368d57fe5b6102008701516001600160401b03169190040290505b8460c001518111156136ee5760c085015160408601519082039081108015906136ce57866040015191505b60c087018051830190526040870180519290920390915291506108cf9050565b506000949350505050565b60016101c08601526000841561373d5760208201516040870151610200880151845191909202916001600160401b03160280828161373357fe5b049250505061375c565b8561020001516001600160401b031686604001518161375857fe5b0490505b8083604001516001600160401b03161015613781575060408201516001600160401b03165b6504000000000081106137db576040805162461bcd60e51b815260206004820152601860248201527f4f6e65537761703a2053544f434b5f544f4f5f4c415247450000000000000000604482015290519081900360640190fd5b60008661020001516001600160401b03168202905060008360200151846000015183028161380557fe5b049050613818856040015184888a614139565b6040850180518490036001600160401b03169052861561384257604088018051829003905261384e565b60408801805183900390525b610100880180518301905260e088018051820190528615613888576138838861028001518660000151838b6102a001516126ba565b6138a2565b6138a28861026001518660000151848b6102a001516126ba565b5050505050505050565b82156138d9576138bb816141a9565b624000118363ffffffff166240000081106138d257fe5b0155612cc9565b6138e2816141a9565b60118363ffffffff166240000081106138f757fe5b0155505050565b811561392557624000118163ffffffff1662400000811061391b57fe5b0160009055613940565b60118163ffffffff1662400000811061393a57fe5b01600090555b5050565b6000808084156139c35760208401516040870151855161020089015191909202916001600160401b039091160280828161397a57fe5b6020880151919004935081840290600019818301018161399657fe5b04945084896040015111156139b3578489604001510395506139bb565b886040015194505b5050506139fb565b8561020001516001600160401b03168660400151816139de57fe5b0490508561020001516001600160401b0316810286604001510392505b60c086018051840190526101e08601518051604082015160209283015192890151613a289385918a613106565b8015613a80576101e08601516001600160401b0382166040909101526101c086015115613a6957613a648686886101e0015189602001516141f1565b613a80565b613a7e8686886101e00151896020015161421c565b505b8415613a96576101608601805183019052612ac0565b50506040840151610180909401805191909403019092525050565b61012082015161014083015160e084015160009291908415613ae3575050506101408301516101208401516101008501515b60c086015160009083810190850281613af857fe5b04905060008760c001511115613b1757613b178760c0015182886142d8565b6000876102c001516001600160a01b0316631a1c6e536040518163ffffffff1660e01b815260040160206040518083038186803b158015613b5757600080fd5b505afa158015613b6b573d6000803e3d6000fd5b505050506040513d6020811015613b8157600080fd5b50519050818301600160701b8110613be0576040805162461bcd60e51b815260206004820152601960248201527f4f6e65537761703a20414d4f554e545f544f4f5f4c4152474500000000000000604482015290519081900360640190fd5b61271063ffffffff8316820261270f010490819003908815613c205760c08a01516101208b01805190910190526101408a01805185900382019052613c40565b6101208a0180518590038201905260c08a01516101408b01805190910190525b6102808a01518915613c5457506102608a01515b613c6e818c6101e0015160000151858e6102a001516126ba565b50909998505050505050505050565b8115613c945763ffffffff81166080840152612cc9565b63ffffffff811660a0840152505050565b613cad614498565b6307ffffff8216601f601b84901c16613cc4614498565b60188263ffffffff1610613cf1576017198201613ce081614341565b8402825250600160208201526130fe565b8163ffffffff1660171415613d0f57828152600160208201526130fe565b8281526016829003613d2a631fffffff600383901c16614377565b613d3682600716614341565b02602083015250949350505050565b60008215613d6f57624000118263ffffffff16624000008110613d6457fe5b015415159050610823565b60118263ffffffff16624000008110613d6457fe5b6000613d8e6144d0565b623fffff831691506000613da28584613554565b909250905080613de857601884901c623fffff169250613dc28584613554565b909250905080613de857603084901c623fffff169250613de28584613554565b90925090505b9250925092565b60005b63ffffffff821615613f2a576000868015613e215750846020015163ffffffff16866020015163ffffffff1611155b80613e49575086158015613e495750846020015163ffffffff16866020015163ffffffff1610155b905080613e565750613f2a565b613e5e6144d0565b606086015163ffffffff1615613ed857613e7c888760600151613554565b5090506000888015613ea15750876020015163ffffffff16826020015163ffffffff16105b80613ec8575088158015613ec85750876020015163ffffffff16826020015163ffffffff16115b9050828015613ed45750805b9250505b8115613f1b5760608087015163ffffffff1690880152613ef98886896138ac565b63ffffffff85166060870152613f108885886138ac565b600192505050612f41565b6060909501519250613df29050565b50600095945050505050565b6bffffffffffffffff00000000602084901b1663ffffff00600884901b16178115613f5f576001175b6040805182815290517f6a6a07eb9c5c878403b0b5f8e3e8277bc86679f3f64f78f7a03fdd9028b5cceb9181900360200190a150505050565b613fa06144d0565b613fa86144d0565b623fffff83166060828101919091526503ffffffffff601685901c1660408084019190915284901c63ffffffff1660208301529290921c82525090565b6020810151815160009185029084028615613ffc57905b5b600160c01b821061401457601091821c911c613ffd565b80614066576040805162461bcd60e51b815260206004820152601860248201527f4f6e6553776170506169723a204449565f42595f5a45524f0000000000000000604482015290519081900360640190fd5b81600160401b029150600081838161407a57fe5b049050600160401b811161409457600093505050506130fe565b6801400000000000000081116140f95767ffffffffffffffff198101808002600160841b81830204680800000000000000008204600284040301905089156140e05780890295506140e6565b80880295505b600160401b8604955050505050506130fe565b600061410482612511565b905063ffffffff198101891561411e578089029550614124565b80880295505b600160201b86049a9950505050505050505050565b67ffffffffffffffff60401b604085901b166001600160401b0384161760201b63ffffff00600884901b1617811561416f576001175b6040805182815290517f990dd855e967f56a5925c6726687ffd2de6724bc344f9db935614fca6324efaa9181900360200190a15050505050565b8051602080830151604084015160609094015163ffffffff9081166001600160401b0390951691169290911b640100000000600160c01b031691909117602a1b1760161b1790565b6141fb8484613538565b63ffffffff1660608301526142118382846138ac565b612ac3848483613c7d565b6000806142298686613538565b905063ffffffff81161561423b6144d0565b816142975761424a8784613554565b50905086801561426d5750856020015163ffffffff16816020015163ffffffff16105b806142945750861580156142945750856020015163ffffffff16816020015163ffffffff16115b91505b81156142cb5763ffffffff831660608701526142b48786886138ac565b6142bf888887613c7d565b600193505050506130fe565b6130f88787838887613def565b6dffffffffffffffffffffffffffff60701b607084901b166001600160701b0383161760081b8115614308576001175b6040805182815290517fa50efdfe775cd1c8927485cb5d33ac19333f22e5e261b6de46acacb915ac5b149181900360200190a150505050565b7f05f5e10000989680000f4240000186a000002710000003e8000000640000000a63ffffffff6020830281169190911c16919050565b6001600160401b03762386f26fc100000000000005f5e100000000000000000163ffffffff60408402161c16919050565b6040518060a001604052806005906020820280368337509192915050565b604051806102e00160405280600015158152602001600063ffffffff16815260200160008152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581526020016144616144d0565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b604051806040016040528060008152602001600081525090565b60405180606001604052806003906020820280368337509192915050565b6040805160808101825260008082526020820181905291810182905260608101919091529056fe4f6e65537761703a204c494d49545f4f524445525f4e4f545f535550504f52544544536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122055638f0a79d92657d3b84c6e87be0bbafae295bfe95d0c3b8fe917c3741ab73364736f6c634300060c0033"

// DeployPair deploys a new Ethereum contract, binding an instance of Pair to it.
func DeployPair(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Pair, error) {
	parsed, err := abi.JSON(strings.NewReader(PairABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PairBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Pair{PairCaller: PairCaller{contract: contract}, PairTransactor: PairTransactor{contract: contract}, PairFilterer: PairFilterer{contract: contract}}, nil
}

// Pair is an auto generated Go binding around an Ethereum contract.
type Pair struct {
	PairCaller     // Read-only binding to the contract
	PairTransactor // Write-only binding to the contract
	PairFilterer   // Log filterer for contract events
}

// PairCaller is an auto generated read-only Go binding around an Ethereum contract.
type PairCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PairTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PairTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PairFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PairFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PairSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PairSession struct {
	Contract     *Pair             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PairCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PairCallerSession struct {
	Contract *PairCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PairTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PairTransactorSession struct {
	Contract     *PairTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PairRaw is an auto generated low-level Go binding around an Ethereum contract.
type PairRaw struct {
	Contract *Pair // Generic contract binding to access the raw methods on
}

// PairCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PairCallerRaw struct {
	Contract *PairCaller // Generic read-only contract binding to access the raw methods on
}

// PairTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PairTransactorRaw struct {
	Contract *PairTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPair creates a new instance of Pair, bound to a specific deployed contract.
func NewPair(address common.Address, backend bind.ContractBackend) (*Pair, error) {
	contract, err := bindPair(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Pair{PairCaller: PairCaller{contract: contract}, PairTransactor: PairTransactor{contract: contract}, PairFilterer: PairFilterer{contract: contract}}, nil
}

// NewPairCaller creates a new read-only instance of Pair, bound to a specific deployed contract.
func NewPairCaller(address common.Address, caller bind.ContractCaller) (*PairCaller, error) {
	contract, err := bindPair(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PairCaller{contract: contract}, nil
}

// NewPairTransactor creates a new write-only instance of Pair, bound to a specific deployed contract.
func NewPairTransactor(address common.Address, transactor bind.ContractTransactor) (*PairTransactor, error) {
	contract, err := bindPair(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PairTransactor{contract: contract}, nil
}

// NewPairFilterer creates a new log filterer instance of Pair, bound to a specific deployed contract.
func NewPairFilterer(address common.Address, filterer bind.ContractFilterer) (*PairFilterer, error) {
	contract, err := bindPair(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PairFilterer{contract: contract}, nil
}

// bindPair binds a generic wrapper to an already deployed contract.
func bindPair(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PairABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pair *PairRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Pair.Contract.PairCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pair *PairRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pair.Contract.PairTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pair *PairRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pair.Contract.PairTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pair *PairCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Pair.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pair *PairTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pair.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pair *PairTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pair.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Pair *PairCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pair.contract.Call(opts, out, "allowance", arg0, arg1)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Pair *PairSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Pair.Contract.Allowance(&_Pair.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_Pair *PairCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Pair.Contract.Allowance(&_Pair.CallOpts, arg0, arg1)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Pair *PairCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pair.contract.Call(opts, out, "balanceOf", arg0)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Pair *PairSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Pair.Contract.BalanceOf(&_Pair.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_Pair *PairCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Pair.Contract.BalanceOf(&_Pair.CallOpts, arg0)
}

// CalcStockAndMoney is a free data retrieval call binding the contract method 0xc2dab57b.
//
// Solidity: function calcStockAndMoney(uint64 amount, uint32 price32) pure returns(uint256 stockAmount, uint256 moneyAmount)
func (_Pair *PairCaller) CalcStockAndMoney(opts *bind.CallOpts, amount uint64, price32 uint32) (struct {
	StockAmount *big.Int
	MoneyAmount *big.Int
}, error) {
	ret := new(struct {
		StockAmount *big.Int
		MoneyAmount *big.Int
	})
	out := ret
	err := _Pair.contract.Call(opts, out, "calcStockAndMoney", amount, price32)
	return *ret, err
}

// CalcStockAndMoney is a free data retrieval call binding the contract method 0xc2dab57b.
//
// Solidity: function calcStockAndMoney(uint64 amount, uint32 price32) pure returns(uint256 stockAmount, uint256 moneyAmount)
func (_Pair *PairSession) CalcStockAndMoney(amount uint64, price32 uint32) (struct {
	StockAmount *big.Int
	MoneyAmount *big.Int
}, error) {
	return _Pair.Contract.CalcStockAndMoney(&_Pair.CallOpts, amount, price32)
}

// CalcStockAndMoney is a free data retrieval call binding the contract method 0xc2dab57b.
//
// Solidity: function calcStockAndMoney(uint64 amount, uint32 price32) pure returns(uint256 stockAmount, uint256 moneyAmount)
func (_Pair *PairCallerSession) CalcStockAndMoney(amount uint64, price32 uint32) (struct {
	StockAmount *big.Int
	MoneyAmount *big.Int
}, error) {
	return _Pair.Contract.CalcStockAndMoney(&_Pair.CallOpts, amount, price32)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Pair *PairCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Pair.contract.Call(opts, out, "decimals")
	return *ret0, err
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Pair *PairSession) Decimals() (uint8, error) {
	return _Pair.Contract.Decimals(&_Pair.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Pair *PairCallerSession) Decimals() (uint8, error) {
	return _Pair.Contract.Decimals(&_Pair.CallOpts)
}

// GetBooked is a free data retrieval call binding the contract method 0x1b857340.
//
// Solidity: function getBooked() view returns(uint112 bookedStock, uint112 bookedMoney, uint32 firstBuyID)
func (_Pair *PairCaller) GetBooked(opts *bind.CallOpts) (struct {
	BookedStock *big.Int
	BookedMoney *big.Int
	FirstBuyID  uint32
}, error) {
	ret := new(struct {
		BookedStock *big.Int
		BookedMoney *big.Int
		FirstBuyID  uint32
	})
	out := ret
	err := _Pair.contract.Call(opts, out, "getBooked")
	return *ret, err
}

// GetBooked is a free data retrieval call binding the contract method 0x1b857340.
//
// Solidity: function getBooked() view returns(uint112 bookedStock, uint112 bookedMoney, uint32 firstBuyID)
func (_Pair *PairSession) GetBooked() (struct {
	BookedStock *big.Int
	BookedMoney *big.Int
	FirstBuyID  uint32
}, error) {
	return _Pair.Contract.GetBooked(&_Pair.CallOpts)
}

// GetBooked is a free data retrieval call binding the contract method 0x1b857340.
//
// Solidity: function getBooked() view returns(uint112 bookedStock, uint112 bookedMoney, uint32 firstBuyID)
func (_Pair *PairCallerSession) GetBooked() (struct {
	BookedStock *big.Int
	BookedMoney *big.Int
	FirstBuyID  uint32
}, error) {
	return _Pair.Contract.GetBooked(&_Pair.CallOpts)
}

// GetOrderList is a free data retrieval call binding the contract method 0x8670b2a4.
//
// Solidity: function getOrderList(bool isBuy, uint32 id, uint32 maxCount) view returns(uint256[])
func (_Pair *PairCaller) GetOrderList(opts *bind.CallOpts, isBuy bool, id uint32, maxCount uint32) ([]*big.Int, error) {
	var (
		ret0 = new([]*big.Int)
	)
	out := ret0
	err := _Pair.contract.Call(opts, out, "getOrderList", isBuy, id, maxCount)
	return *ret0, err
}

// GetOrderList is a free data retrieval call binding the contract method 0x8670b2a4.
//
// Solidity: function getOrderList(bool isBuy, uint32 id, uint32 maxCount) view returns(uint256[])
func (_Pair *PairSession) GetOrderList(isBuy bool, id uint32, maxCount uint32) ([]*big.Int, error) {
	return _Pair.Contract.GetOrderList(&_Pair.CallOpts, isBuy, id, maxCount)
}

// GetOrderList is a free data retrieval call binding the contract method 0x8670b2a4.
//
// Solidity: function getOrderList(bool isBuy, uint32 id, uint32 maxCount) view returns(uint256[])
func (_Pair *PairCallerSession) GetOrderList(isBuy bool, id uint32, maxCount uint32) ([]*big.Int, error) {
	return _Pair.Contract.GetOrderList(&_Pair.CallOpts, isBuy, id, maxCount)
}

// GetReserves is a free data retrieval call binding the contract method 0x0902f1ac.
//
// Solidity: function getReserves() view returns(uint112 reserveStock, uint112 reserveMoney, uint32 firstSellID)
func (_Pair *PairCaller) GetReserves(opts *bind.CallOpts) (struct {
	ReserveStock *big.Int
	ReserveMoney *big.Int
	FirstSellID  uint32
}, error) {
	ret := new(struct {
		ReserveStock *big.Int
		ReserveMoney *big.Int
		FirstSellID  uint32
	})
	out := ret
	err := _Pair.contract.Call(opts, out, "getReserves")
	return *ret, err
}

// GetReserves is a free data retrieval call binding the contract method 0x0902f1ac.
//
// Solidity: function getReserves() view returns(uint112 reserveStock, uint112 reserveMoney, uint32 firstSellID)
func (_Pair *PairSession) GetReserves() (struct {
	ReserveStock *big.Int
	ReserveMoney *big.Int
	FirstSellID  uint32
}, error) {
	return _Pair.Contract.GetReserves(&_Pair.CallOpts)
}

// GetReserves is a free data retrieval call binding the contract method 0x0902f1ac.
//
// Solidity: function getReserves() view returns(uint112 reserveStock, uint112 reserveMoney, uint32 firstSellID)
func (_Pair *PairCallerSession) GetReserves() (struct {
	ReserveStock *big.Int
	ReserveMoney *big.Int
	FirstSellID  uint32
}, error) {
	return _Pair.Contract.GetReserves(&_Pair.CallOpts)
}

// InternalStatus is a free data retrieval call binding the contract method 0xe6ba4136.
//
// Solidity: function internalStatus() view returns(uint256[3] res)
func (_Pair *PairCaller) InternalStatus(opts *bind.CallOpts) ([3]*big.Int, error) {
	var (
		ret0 = new([3]*big.Int)
	)
	out := ret0
	err := _Pair.contract.Call(opts, out, "internalStatus")
	return *ret0, err
}

// InternalStatus is a free data retrieval call binding the contract method 0xe6ba4136.
//
// Solidity: function internalStatus() view returns(uint256[3] res)
func (_Pair *PairSession) InternalStatus() ([3]*big.Int, error) {
	return _Pair.Contract.InternalStatus(&_Pair.CallOpts)
}

// InternalStatus is a free data retrieval call binding the contract method 0xe6ba4136.
//
// Solidity: function internalStatus() view returns(uint256[3] res)
func (_Pair *PairCallerSession) InternalStatus() ([3]*big.Int, error) {
	return _Pair.Contract.InternalStatus(&_Pair.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Pair *PairCaller) Name(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Pair.contract.Call(opts, out, "name")
	return *ret0, err
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Pair *PairSession) Name() (string, error) {
	return _Pair.Contract.Name(&_Pair.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Pair *PairCallerSession) Name() (string, error) {
	return _Pair.Contract.Name(&_Pair.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Pair *PairCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pair.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Pair *PairSession) TotalSupply() (*big.Int, error) {
	return _Pair.Contract.TotalSupply(&_Pair.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Pair *PairCallerSession) TotalSupply() (*big.Int, error) {
	return _Pair.Contract.TotalSupply(&_Pair.CallOpts)
}

// AddLimitOrder is a paid mutator transaction binding the contract method 0xc018f413.
//
// Solidity: function addLimitOrder(bool isBuy, address sender, uint64 amount, uint32 price32, uint32 id, uint72 prevKey) payable returns()
func (_Pair *PairTransactor) AddLimitOrder(opts *bind.TransactOpts, isBuy bool, sender common.Address, amount uint64, price32 uint32, id uint32, prevKey *big.Int) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "addLimitOrder", isBuy, sender, amount, price32, id, prevKey)
}

// AddLimitOrder is a paid mutator transaction binding the contract method 0xc018f413.
//
// Solidity: function addLimitOrder(bool isBuy, address sender, uint64 amount, uint32 price32, uint32 id, uint72 prevKey) payable returns()
func (_Pair *PairSession) AddLimitOrder(isBuy bool, sender common.Address, amount uint64, price32 uint32, id uint32, prevKey *big.Int) (*types.Transaction, error) {
	return _Pair.Contract.AddLimitOrder(&_Pair.TransactOpts, isBuy, sender, amount, price32, id, prevKey)
}

// AddLimitOrder is a paid mutator transaction binding the contract method 0xc018f413.
//
// Solidity: function addLimitOrder(bool isBuy, address sender, uint64 amount, uint32 price32, uint32 id, uint72 prevKey) payable returns()
func (_Pair *PairTransactorSession) AddLimitOrder(isBuy bool, sender common.Address, amount uint64, price32 uint32, id uint32, prevKey *big.Int) (*types.Transaction, error) {
	return _Pair.Contract.AddLimitOrder(&_Pair.TransactOpts, isBuy, sender, amount, price32, id, prevKey)
}

// AddMarketOrder is a paid mutator transaction binding the contract method 0xa6e81533.
//
// Solidity: function addMarketOrder(address inputToken, address sender, uint112 inAmount) payable returns(uint256)
func (_Pair *PairTransactor) AddMarketOrder(opts *bind.TransactOpts, inputToken common.Address, sender common.Address, inAmount *big.Int) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "addMarketOrder", inputToken, sender, inAmount)
}

// AddMarketOrder is a paid mutator transaction binding the contract method 0xa6e81533.
//
// Solidity: function addMarketOrder(address inputToken, address sender, uint112 inAmount) payable returns(uint256)
func (_Pair *PairSession) AddMarketOrder(inputToken common.Address, sender common.Address, inAmount *big.Int) (*types.Transaction, error) {
	return _Pair.Contract.AddMarketOrder(&_Pair.TransactOpts, inputToken, sender, inAmount)
}

// AddMarketOrder is a paid mutator transaction binding the contract method 0xa6e81533.
//
// Solidity: function addMarketOrder(address inputToken, address sender, uint112 inAmount) payable returns(uint256)
func (_Pair *PairTransactorSession) AddMarketOrder(inputToken common.Address, sender common.Address, inAmount *big.Int) (*types.Transaction, error) {
	return _Pair.Contract.AddMarketOrder(&_Pair.TransactOpts, inputToken, sender, inAmount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_Pair *PairTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_Pair *PairSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _Pair.Contract.Approve(&_Pair.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_Pair *PairTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _Pair.Contract.Approve(&_Pair.TransactOpts, spender, value)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address to) returns(uint256 stockAmount, uint256 moneyAmount)
func (_Pair *PairTransactor) Burn(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "burn", to)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address to) returns(uint256 stockAmount, uint256 moneyAmount)
func (_Pair *PairSession) Burn(to common.Address) (*types.Transaction, error) {
	return _Pair.Contract.Burn(&_Pair.TransactOpts, to)
}

// Burn is a paid mutator transaction binding the contract method 0x89afcb44.
//
// Solidity: function burn(address to) returns(uint256 stockAmount, uint256 moneyAmount)
func (_Pair *PairTransactorSession) Burn(to common.Address) (*types.Transaction, error) {
	return _Pair.Contract.Burn(&_Pair.TransactOpts, to)
}

// GetPrices is a paid mutator transaction binding the contract method 0xbd9a548b.
//
// Solidity: function getPrices() returns(uint256 firstSellPriceNumerator, uint256 firstSellPriceDenominator, uint256 firstBuyPriceNumerator, uint256 firstBuyPriceDenominator, uint256 poolPriceNumerator, uint256 poolPriceDenominator)
func (_Pair *PairTransactor) GetPrices(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "getPrices")
}

// GetPrices is a paid mutator transaction binding the contract method 0xbd9a548b.
//
// Solidity: function getPrices() returns(uint256 firstSellPriceNumerator, uint256 firstSellPriceDenominator, uint256 firstBuyPriceNumerator, uint256 firstBuyPriceDenominator, uint256 poolPriceNumerator, uint256 poolPriceDenominator)
func (_Pair *PairSession) GetPrices() (*types.Transaction, error) {
	return _Pair.Contract.GetPrices(&_Pair.TransactOpts)
}

// GetPrices is a paid mutator transaction binding the contract method 0xbd9a548b.
//
// Solidity: function getPrices() returns(uint256 firstSellPriceNumerator, uint256 firstSellPriceDenominator, uint256 firstBuyPriceNumerator, uint256 firstBuyPriceDenominator, uint256 poolPriceNumerator, uint256 poolPriceDenominator)
func (_Pair *PairTransactorSession) GetPrices() (*types.Transaction, error) {
	return _Pair.Contract.GetPrices(&_Pair.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address to) returns(uint256 liquidity)
func (_Pair *PairTransactor) Mint(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "mint", to)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address to) returns(uint256 liquidity)
func (_Pair *PairSession) Mint(to common.Address) (*types.Transaction, error) {
	return _Pair.Contract.Mint(&_Pair.TransactOpts, to)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address to) returns(uint256 liquidity)
func (_Pair *PairTransactorSession) Mint(to common.Address) (*types.Transaction, error) {
	return _Pair.Contract.Mint(&_Pair.TransactOpts, to)
}

// Money is a paid mutator transaction binding the contract method 0x4ddd108a.
//
// Solidity: function money() returns(address)
func (_Pair *PairTransactor) Money(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "money")
}

// Money is a paid mutator transaction binding the contract method 0x4ddd108a.
//
// Solidity: function money() returns(address)
func (_Pair *PairSession) Money() (*types.Transaction, error) {
	return _Pair.Contract.Money(&_Pair.TransactOpts)
}

// Money is a paid mutator transaction binding the contract method 0x4ddd108a.
//
// Solidity: function money() returns(address)
func (_Pair *PairTransactorSession) Money() (*types.Transaction, error) {
	return _Pair.Contract.Money(&_Pair.TransactOpts)
}

// RemoveOrder is a paid mutator transaction binding the contract method 0x7850378e.
//
// Solidity: function removeOrder(bool isBuy, uint32 id, uint72 prevKey) returns()
func (_Pair *PairTransactor) RemoveOrder(opts *bind.TransactOpts, isBuy bool, id uint32, prevKey *big.Int) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "removeOrder", isBuy, id, prevKey)
}

// RemoveOrder is a paid mutator transaction binding the contract method 0x7850378e.
//
// Solidity: function removeOrder(bool isBuy, uint32 id, uint72 prevKey) returns()
func (_Pair *PairSession) RemoveOrder(isBuy bool, id uint32, prevKey *big.Int) (*types.Transaction, error) {
	return _Pair.Contract.RemoveOrder(&_Pair.TransactOpts, isBuy, id, prevKey)
}

// RemoveOrder is a paid mutator transaction binding the contract method 0x7850378e.
//
// Solidity: function removeOrder(bool isBuy, uint32 id, uint72 prevKey) returns()
func (_Pair *PairTransactorSession) RemoveOrder(isBuy bool, id uint32, prevKey *big.Int) (*types.Transaction, error) {
	return _Pair.Contract.RemoveOrder(&_Pair.TransactOpts, isBuy, id, prevKey)
}

// RemoveOrders is a paid mutator transaction binding the contract method 0x2a63986b.
//
// Solidity: function removeOrders(uint256[] rmList) returns()
func (_Pair *PairTransactor) RemoveOrders(opts *bind.TransactOpts, rmList []*big.Int) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "removeOrders", rmList)
}

// RemoveOrders is a paid mutator transaction binding the contract method 0x2a63986b.
//
// Solidity: function removeOrders(uint256[] rmList) returns()
func (_Pair *PairSession) RemoveOrders(rmList []*big.Int) (*types.Transaction, error) {
	return _Pair.Contract.RemoveOrders(&_Pair.TransactOpts, rmList)
}

// RemoveOrders is a paid mutator transaction binding the contract method 0x2a63986b.
//
// Solidity: function removeOrders(uint256[] rmList) returns()
func (_Pair *PairTransactorSession) RemoveOrders(rmList []*big.Int) (*types.Transaction, error) {
	return _Pair.Contract.RemoveOrders(&_Pair.TransactOpts, rmList)
}

// Skim is a paid mutator transaction binding the contract method 0xbc25cf77.
//
// Solidity: function skim(address to) returns()
func (_Pair *PairTransactor) Skim(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "skim", to)
}

// Skim is a paid mutator transaction binding the contract method 0xbc25cf77.
//
// Solidity: function skim(address to) returns()
func (_Pair *PairSession) Skim(to common.Address) (*types.Transaction, error) {
	return _Pair.Contract.Skim(&_Pair.TransactOpts, to)
}

// Skim is a paid mutator transaction binding the contract method 0xbc25cf77.
//
// Solidity: function skim(address to) returns()
func (_Pair *PairTransactorSession) Skim(to common.Address) (*types.Transaction, error) {
	return _Pair.Contract.Skim(&_Pair.TransactOpts, to)
}

// Stock is a paid mutator transaction binding the contract method 0xbdf3c4ae.
//
// Solidity: function stock() returns(address)
func (_Pair *PairTransactor) Stock(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "stock")
}

// Stock is a paid mutator transaction binding the contract method 0xbdf3c4ae.
//
// Solidity: function stock() returns(address)
func (_Pair *PairSession) Stock() (*types.Transaction, error) {
	return _Pair.Contract.Stock(&_Pair.TransactOpts)
}

// Stock is a paid mutator transaction binding the contract method 0xbdf3c4ae.
//
// Solidity: function stock() returns(address)
func (_Pair *PairTransactorSession) Stock() (*types.Transaction, error) {
	return _Pair.Contract.Stock(&_Pair.TransactOpts)
}

// Symbol is a paid mutator transaction binding the contract method 0x95d89b41.
//
// Solidity: function symbol() returns(string)
func (_Pair *PairTransactor) Symbol(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "symbol")
}

// Symbol is a paid mutator transaction binding the contract method 0x95d89b41.
//
// Solidity: function symbol() returns(string)
func (_Pair *PairSession) Symbol() (*types.Transaction, error) {
	return _Pair.Contract.Symbol(&_Pair.TransactOpts)
}

// Symbol is a paid mutator transaction binding the contract method 0x95d89b41.
//
// Solidity: function symbol() returns(string)
func (_Pair *PairTransactorSession) Symbol() (*types.Transaction, error) {
	return _Pair.Contract.Symbol(&_Pair.TransactOpts)
}

// Sync is a paid mutator transaction binding the contract method 0xfff6cae9.
//
// Solidity: function sync() returns()
func (_Pair *PairTransactor) Sync(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "sync")
}

// Sync is a paid mutator transaction binding the contract method 0xfff6cae9.
//
// Solidity: function sync() returns()
func (_Pair *PairSession) Sync() (*types.Transaction, error) {
	return _Pair.Contract.Sync(&_Pair.TransactOpts)
}

// Sync is a paid mutator transaction binding the contract method 0xfff6cae9.
//
// Solidity: function sync() returns()
func (_Pair *PairTransactorSession) Sync() (*types.Transaction, error) {
	return _Pair.Contract.Sync(&_Pair.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_Pair *PairTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_Pair *PairSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Pair.Contract.Transfer(&_Pair.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_Pair *PairTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Pair.Contract.Transfer(&_Pair.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_Pair *PairTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Pair.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_Pair *PairSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Pair.Contract.TransferFrom(&_Pair.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_Pair *PairTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _Pair.Contract.TransferFrom(&_Pair.TransactOpts, from, to, value)
}

// PairApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Pair contract.
type PairApprovalIterator struct {
	Event *PairApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PairApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PairApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PairApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PairApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PairApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PairApproval represents a Approval event raised by the Pair contract.
type PairApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Pair *PairFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*PairApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Pair.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &PairApprovalIterator{contract: _Pair.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Pair *PairFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PairApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Pair.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PairApproval)
				if err := _Pair.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Pair *PairFilterer) ParseApproval(log types.Log) (*PairApproval, error) {
	event := new(PairApproval)
	if err := _Pair.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PairBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the Pair contract.
type PairBurnIterator struct {
	Event *PairBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PairBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PairBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PairBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PairBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PairBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PairBurn represents a Burn event raised by the Pair contract.
type PairBurn struct {
	Sender              common.Address
	StockAndMoneyAmount *big.Int
	To                  common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xdbdf9b8e4b75e75b162d151ec8fc7f0561cabab5fcccfa2600be62223e4300c4.
//
// Solidity: event Burn(address indexed sender, uint256 stockAndMoneyAmount, address indexed to)
func (_Pair *PairFilterer) FilterBurn(opts *bind.FilterOpts, sender []common.Address, to []common.Address) (*PairBurnIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Pair.contract.FilterLogs(opts, "Burn", senderRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PairBurnIterator{contract: _Pair.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xdbdf9b8e4b75e75b162d151ec8fc7f0561cabab5fcccfa2600be62223e4300c4.
//
// Solidity: event Burn(address indexed sender, uint256 stockAndMoneyAmount, address indexed to)
func (_Pair *PairFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *PairBurn, sender []common.Address, to []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Pair.contract.WatchLogs(opts, "Burn", senderRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PairBurn)
				if err := _Pair.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xdbdf9b8e4b75e75b162d151ec8fc7f0561cabab5fcccfa2600be62223e4300c4.
//
// Solidity: event Burn(address indexed sender, uint256 stockAndMoneyAmount, address indexed to)
func (_Pair *PairFilterer) ParseBurn(log types.Log) (*PairBurn, error) {
	event := new(PairBurn)
	if err := _Pair.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PairDealWithPoolIterator is returned from FilterDealWithPool and is used to iterate over the raw logs and unpacked data for DealWithPool events raised by the Pair contract.
type PairDealWithPoolIterator struct {
	Event *PairDealWithPool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PairDealWithPoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PairDealWithPool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PairDealWithPool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PairDealWithPoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PairDealWithPoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PairDealWithPool represents a DealWithPool event raised by the Pair contract.
type PairDealWithPool struct {
	Data *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDealWithPool is a free log retrieval operation binding the contract event 0xa50efdfe775cd1c8927485cb5d33ac19333f22e5e261b6de46acacb915ac5b14.
//
// Solidity: event DealWithPool(uint256 data)
func (_Pair *PairFilterer) FilterDealWithPool(opts *bind.FilterOpts) (*PairDealWithPoolIterator, error) {

	logs, sub, err := _Pair.contract.FilterLogs(opts, "DealWithPool")
	if err != nil {
		return nil, err
	}
	return &PairDealWithPoolIterator{contract: _Pair.contract, event: "DealWithPool", logs: logs, sub: sub}, nil
}

// WatchDealWithPool is a free log subscription operation binding the contract event 0xa50efdfe775cd1c8927485cb5d33ac19333f22e5e261b6de46acacb915ac5b14.
//
// Solidity: event DealWithPool(uint256 data)
func (_Pair *PairFilterer) WatchDealWithPool(opts *bind.WatchOpts, sink chan<- *PairDealWithPool) (event.Subscription, error) {

	logs, sub, err := _Pair.contract.WatchLogs(opts, "DealWithPool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PairDealWithPool)
				if err := _Pair.contract.UnpackLog(event, "DealWithPool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDealWithPool is a log parse operation binding the contract event 0xa50efdfe775cd1c8927485cb5d33ac19333f22e5e261b6de46acacb915ac5b14.
//
// Solidity: event DealWithPool(uint256 data)
func (_Pair *PairFilterer) ParseDealWithPool(log types.Log) (*PairDealWithPool, error) {
	event := new(PairDealWithPool)
	if err := _Pair.contract.UnpackLog(event, "DealWithPool", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PairMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the Pair contract.
type PairMintIterator struct {
	Event *PairMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PairMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PairMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PairMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PairMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PairMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PairMint represents a Mint event raised by the Pair contract.
type PairMint struct {
	Sender              common.Address
	StockAndMoneyAmount *big.Int
	To                  common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0xbcad3d7d3dfccb90d49c6063bf70f828901fefc88937d90af74e58e6e55bc39d.
//
// Solidity: event Mint(address indexed sender, uint256 stockAndMoneyAmount, address indexed to)
func (_Pair *PairFilterer) FilterMint(opts *bind.FilterOpts, sender []common.Address, to []common.Address) (*PairMintIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Pair.contract.FilterLogs(opts, "Mint", senderRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PairMintIterator{contract: _Pair.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0xbcad3d7d3dfccb90d49c6063bf70f828901fefc88937d90af74e58e6e55bc39d.
//
// Solidity: event Mint(address indexed sender, uint256 stockAndMoneyAmount, address indexed to)
func (_Pair *PairFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *PairMint, sender []common.Address, to []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Pair.contract.WatchLogs(opts, "Mint", senderRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PairMint)
				if err := _Pair.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0xbcad3d7d3dfccb90d49c6063bf70f828901fefc88937d90af74e58e6e55bc39d.
//
// Solidity: event Mint(address indexed sender, uint256 stockAndMoneyAmount, address indexed to)
func (_Pair *PairFilterer) ParseMint(log types.Log) (*PairMint, error) {
	event := new(PairMint)
	if err := _Pair.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PairNewLimitOrderIterator is returned from FilterNewLimitOrder and is used to iterate over the raw logs and unpacked data for NewLimitOrder events raised by the Pair contract.
type PairNewLimitOrderIterator struct {
	Event *PairNewLimitOrder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PairNewLimitOrderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PairNewLimitOrder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PairNewLimitOrder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PairNewLimitOrderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PairNewLimitOrderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PairNewLimitOrder represents a NewLimitOrder event raised by the Pair contract.
type PairNewLimitOrder struct {
	Data *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterNewLimitOrder is a free log retrieval operation binding the contract event 0xfec76bfb0f1949c9e27b78f575fce4513238705f161f7e90231d07ebde929a13.
//
// Solidity: event NewLimitOrder(uint256 data)
func (_Pair *PairFilterer) FilterNewLimitOrder(opts *bind.FilterOpts) (*PairNewLimitOrderIterator, error) {

	logs, sub, err := _Pair.contract.FilterLogs(opts, "NewLimitOrder")
	if err != nil {
		return nil, err
	}
	return &PairNewLimitOrderIterator{contract: _Pair.contract, event: "NewLimitOrder", logs: logs, sub: sub}, nil
}

// WatchNewLimitOrder is a free log subscription operation binding the contract event 0xfec76bfb0f1949c9e27b78f575fce4513238705f161f7e90231d07ebde929a13.
//
// Solidity: event NewLimitOrder(uint256 data)
func (_Pair *PairFilterer) WatchNewLimitOrder(opts *bind.WatchOpts, sink chan<- *PairNewLimitOrder) (event.Subscription, error) {

	logs, sub, err := _Pair.contract.WatchLogs(opts, "NewLimitOrder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PairNewLimitOrder)
				if err := _Pair.contract.UnpackLog(event, "NewLimitOrder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewLimitOrder is a log parse operation binding the contract event 0xfec76bfb0f1949c9e27b78f575fce4513238705f161f7e90231d07ebde929a13.
//
// Solidity: event NewLimitOrder(uint256 data)
func (_Pair *PairFilterer) ParseNewLimitOrder(log types.Log) (*PairNewLimitOrder, error) {
	event := new(PairNewLimitOrder)
	if err := _Pair.contract.UnpackLog(event, "NewLimitOrder", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PairNewMarketOrderIterator is returned from FilterNewMarketOrder and is used to iterate over the raw logs and unpacked data for NewMarketOrder events raised by the Pair contract.
type PairNewMarketOrderIterator struct {
	Event *PairNewMarketOrder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PairNewMarketOrderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PairNewMarketOrder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PairNewMarketOrder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PairNewMarketOrderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PairNewMarketOrderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PairNewMarketOrder represents a NewMarketOrder event raised by the Pair contract.
type PairNewMarketOrder struct {
	Data *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterNewMarketOrder is a free log retrieval operation binding the contract event 0x4a9ae315b457897254ce3dff6a6eee548e004eee8b6d468ae17d13132d40a2cb.
//
// Solidity: event NewMarketOrder(uint256 data)
func (_Pair *PairFilterer) FilterNewMarketOrder(opts *bind.FilterOpts) (*PairNewMarketOrderIterator, error) {

	logs, sub, err := _Pair.contract.FilterLogs(opts, "NewMarketOrder")
	if err != nil {
		return nil, err
	}
	return &PairNewMarketOrderIterator{contract: _Pair.contract, event: "NewMarketOrder", logs: logs, sub: sub}, nil
}

// WatchNewMarketOrder is a free log subscription operation binding the contract event 0x4a9ae315b457897254ce3dff6a6eee548e004eee8b6d468ae17d13132d40a2cb.
//
// Solidity: event NewMarketOrder(uint256 data)
func (_Pair *PairFilterer) WatchNewMarketOrder(opts *bind.WatchOpts, sink chan<- *PairNewMarketOrder) (event.Subscription, error) {

	logs, sub, err := _Pair.contract.WatchLogs(opts, "NewMarketOrder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PairNewMarketOrder)
				if err := _Pair.contract.UnpackLog(event, "NewMarketOrder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewMarketOrder is a log parse operation binding the contract event 0x4a9ae315b457897254ce3dff6a6eee548e004eee8b6d468ae17d13132d40a2cb.
//
// Solidity: event NewMarketOrder(uint256 data)
func (_Pair *PairFilterer) ParseNewMarketOrder(log types.Log) (*PairNewMarketOrder, error) {
	event := new(PairNewMarketOrder)
	if err := _Pair.contract.UnpackLog(event, "NewMarketOrder", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PairOrderChangedIterator is returned from FilterOrderChanged and is used to iterate over the raw logs and unpacked data for OrderChanged events raised by the Pair contract.
type PairOrderChangedIterator struct {
	Event *PairOrderChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PairOrderChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PairOrderChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PairOrderChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PairOrderChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PairOrderChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PairOrderChanged represents a OrderChanged event raised by the Pair contract.
type PairOrderChanged struct {
	Data *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOrderChanged is a free log retrieval operation binding the contract event 0x990dd855e967f56a5925c6726687ffd2de6724bc344f9db935614fca6324efaa.
//
// Solidity: event OrderChanged(uint256 data)
func (_Pair *PairFilterer) FilterOrderChanged(opts *bind.FilterOpts) (*PairOrderChangedIterator, error) {

	logs, sub, err := _Pair.contract.FilterLogs(opts, "OrderChanged")
	if err != nil {
		return nil, err
	}
	return &PairOrderChangedIterator{contract: _Pair.contract, event: "OrderChanged", logs: logs, sub: sub}, nil
}

// WatchOrderChanged is a free log subscription operation binding the contract event 0x990dd855e967f56a5925c6726687ffd2de6724bc344f9db935614fca6324efaa.
//
// Solidity: event OrderChanged(uint256 data)
func (_Pair *PairFilterer) WatchOrderChanged(opts *bind.WatchOpts, sink chan<- *PairOrderChanged) (event.Subscription, error) {

	logs, sub, err := _Pair.contract.WatchLogs(opts, "OrderChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PairOrderChanged)
				if err := _Pair.contract.UnpackLog(event, "OrderChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderChanged is a log parse operation binding the contract event 0x990dd855e967f56a5925c6726687ffd2de6724bc344f9db935614fca6324efaa.
//
// Solidity: event OrderChanged(uint256 data)
func (_Pair *PairFilterer) ParseOrderChanged(log types.Log) (*PairOrderChanged, error) {
	event := new(PairOrderChanged)
	if err := _Pair.contract.UnpackLog(event, "OrderChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PairRemoveOrderIterator is returned from FilterRemoveOrder and is used to iterate over the raw logs and unpacked data for RemoveOrder events raised by the Pair contract.
type PairRemoveOrderIterator struct {
	Event *PairRemoveOrder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PairRemoveOrderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PairRemoveOrder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PairRemoveOrder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PairRemoveOrderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PairRemoveOrderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PairRemoveOrder represents a RemoveOrder event raised by the Pair contract.
type PairRemoveOrder struct {
	Data *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRemoveOrder is a free log retrieval operation binding the contract event 0x6a6a07eb9c5c878403b0b5f8e3e8277bc86679f3f64f78f7a03fdd9028b5cceb.
//
// Solidity: event RemoveOrder(uint256 data)
func (_Pair *PairFilterer) FilterRemoveOrder(opts *bind.FilterOpts) (*PairRemoveOrderIterator, error) {

	logs, sub, err := _Pair.contract.FilterLogs(opts, "RemoveOrder")
	if err != nil {
		return nil, err
	}
	return &PairRemoveOrderIterator{contract: _Pair.contract, event: "RemoveOrder", logs: logs, sub: sub}, nil
}

// WatchRemoveOrder is a free log subscription operation binding the contract event 0x6a6a07eb9c5c878403b0b5f8e3e8277bc86679f3f64f78f7a03fdd9028b5cceb.
//
// Solidity: event RemoveOrder(uint256 data)
func (_Pair *PairFilterer) WatchRemoveOrder(opts *bind.WatchOpts, sink chan<- *PairRemoveOrder) (event.Subscription, error) {

	logs, sub, err := _Pair.contract.WatchLogs(opts, "RemoveOrder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PairRemoveOrder)
				if err := _Pair.contract.UnpackLog(event, "RemoveOrder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveOrder is a log parse operation binding the contract event 0x6a6a07eb9c5c878403b0b5f8e3e8277bc86679f3f64f78f7a03fdd9028b5cceb.
//
// Solidity: event RemoveOrder(uint256 data)
func (_Pair *PairFilterer) ParseRemoveOrder(log types.Log) (*PairRemoveOrder, error) {
	event := new(PairRemoveOrder)
	if err := _Pair.contract.UnpackLog(event, "RemoveOrder", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PairSyncIterator is returned from FilterSync and is used to iterate over the raw logs and unpacked data for Sync events raised by the Pair contract.
type PairSyncIterator struct {
	Event *PairSync // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PairSyncIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PairSync)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PairSync)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PairSyncIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PairSyncIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PairSync represents a Sync event raised by the Pair contract.
type PairSync struct {
	ReserveStockAndMoney *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterSync is a free log retrieval operation binding the contract event 0x8a0df8ef054fae2c3d2d19a7b322e864870cc9fd3cb07fb9526309c596244bf4.
//
// Solidity: event Sync(uint256 reserveStockAndMoney)
func (_Pair *PairFilterer) FilterSync(opts *bind.FilterOpts) (*PairSyncIterator, error) {

	logs, sub, err := _Pair.contract.FilterLogs(opts, "Sync")
	if err != nil {
		return nil, err
	}
	return &PairSyncIterator{contract: _Pair.contract, event: "Sync", logs: logs, sub: sub}, nil
}

// WatchSync is a free log subscription operation binding the contract event 0x8a0df8ef054fae2c3d2d19a7b322e864870cc9fd3cb07fb9526309c596244bf4.
//
// Solidity: event Sync(uint256 reserveStockAndMoney)
func (_Pair *PairFilterer) WatchSync(opts *bind.WatchOpts, sink chan<- *PairSync) (event.Subscription, error) {

	logs, sub, err := _Pair.contract.WatchLogs(opts, "Sync")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PairSync)
				if err := _Pair.contract.UnpackLog(event, "Sync", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSync is a log parse operation binding the contract event 0x8a0df8ef054fae2c3d2d19a7b322e864870cc9fd3cb07fb9526309c596244bf4.
//
// Solidity: event Sync(uint256 reserveStockAndMoney)
func (_Pair *PairFilterer) ParseSync(log types.Log) (*PairSync, error) {
	event := new(PairSync)
	if err := _Pair.contract.UnpackLog(event, "Sync", log); err != nil {
		return nil, err
	}
	return event, nil
}

// PairTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Pair contract.
type PairTransferIterator struct {
	Event *PairTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PairTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PairTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PairTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PairTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PairTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PairTransfer represents a Transfer event raised by the Pair contract.
type PairTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Pair *PairFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*PairTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Pair.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PairTransferIterator{contract: _Pair.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Pair *PairFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PairTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Pair.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PairTransfer)
				if err := _Pair.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Pair *PairFilterer) ParseTransfer(log types.Log) (*PairTransfer, error) {
	event := new(PairTransfer)
	if err := _Pair.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}
